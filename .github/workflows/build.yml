name: CI Pipeline

on: [push, pull_request]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            path: bin/movie_booking_service.exe
          - os: ubuntu-latest
            path: bin/movie_booking_service
          - os: macos-latest
            path: bin/movie_booking_service
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          python -m pip install conan
      - name: Set up Conan profile
        run: conan profile detect
      - name: Build the project
        shell: bash
        run: make all
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: movie_booking_service_${{ matrix.os }}
          path: ${{ matrix.path }}

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    outputs:
      url: ${{ steps.create_release.outputs.upload_url }}
      tag: ${{ steps.version.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Version
        id: version
        uses: anothrNick/github-tag-action@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          DEFAULT_BUMP: "patch"
          RELEASE_BRANCHES: "master"
          WITH_V: true
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: "Movie Booking Service ${{ steps.version.outputs.new_tag }}"
          tag_name: ${{ steps.version.outputs.new_tag }}
          body: "Automated release of version ${{ steps.version.outputs.new_tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload_artifacts:
    name: Upload Release Artifacts
    runs-on: ubuntu-latest
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            path: movie_booking_service.exe
            name: movie_booking_service_windows
          - os: ubuntu-latest
            path: movie_booking_service
            name: movie_booking_service_linux
          - os: macos-latest
            path: movie_booking_service
            name: movie_booking_service_darwin
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: movie_booking_service_${{ matrix.os }}
      - name: List folders
        run: ls -al
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create_release.outputs.url }}
          asset_path: ${{ matrix.path }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        run: |
          docker build -t zezulinsky/movie_booking_service:latest -t zezulinsky/movie_booking_service:${{ needs.create_release.outputs.tag }} .
      - name: Push Docker image to GitHub Packages
        run: |
          docker push zezulinsky/movie_booking_service:latest
          docker push zezulinsky/movie_booking_service:${{ needs.create_release.outputs.tag }}
